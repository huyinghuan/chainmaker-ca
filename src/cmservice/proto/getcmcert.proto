syntax = "proto3";
package cmservice;
option go_package = ".;cmservice";
service ChainMakerCertApply {
rpc GenerateCert(ChainMakerCertApplyReq)returns(GenerateResp){}
rpc GetCertTar(GetCertTarReq) returns (TarCertResp){}
rpc GetCertByConditions(GetCertReq) returns (GetCertResp){}
rpc ImportOrgCaAndKey(ImportOrgCaAndKeyReq) returns (ImportOrgCaAndKeyResp){}
}
message ChainMakerCertApplyReq {
  repeated Org orgs = 1;
  string filetarget = 2;
}
message GetCertTarReq {
  string filetarget = 1;
  string filesource = 2;
}

//无条件 string 传""
// enum 传 -1
message GetCertReq {
  string user_id =1; //user_name 或者 node_id
  string org_id =2;
  CertUsage usage = 3;
  UserType type = 4;
}
message GetCertResp {
repeated CertAndPrivKey cert_key = 1;
}
message CertAndPrivKey {
  bytes cert_content =1;
  bytes private_key= 2;
  string usage = 3;
}
message Org {
  string country = 1;
  string locality =2;
  string province =3;
  repeated Node nodes = 4;
  repeated User users = 5;
  string org_id=6;
}
message Node {
string node_id=1;
UserType type=2;
repeated string sans=3;
}
message User {
  string user_name=1;
  UserType type=2;
}
enum UserType{
  root = 0;
  ca=1;
  admin=2;
  client=3;
  consensus=4;
  common=5;
}
enum CertUsage {
  sign=0;
  tls=1;
}
message TarCertResp {
bytes certfile = 1;
}
message GenerateResp{
  string filepath =1;
}
message ImportOrgCaAndKeyReq {
  bytes cert = 1;
  bytes key = 2;
}
message ImportOrgCaAndKeyResp {
  bool isOk = 1;
}