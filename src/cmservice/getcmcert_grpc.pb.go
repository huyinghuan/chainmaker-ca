// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cmservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChainMakerCertApplyClient is the client API for ChainMakerCertApply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainMakerCertApplyClient interface {
	GenerateCert(ctx context.Context, in *ChainMakerCertApplyReq, opts ...grpc.CallOption) (*GenerateResp, error)
	GetCertTar(ctx context.Context, in *GetCertTarReq, opts ...grpc.CallOption) (*TarCertResp, error)
	GetCertByConditions(ctx context.Context, in *GetCertReq, opts ...grpc.CallOption) (*GetCertResp, error)
	ImportOrgCaAndKey(ctx context.Context, in *ImportOrgCaAndKeyReq, opts ...grpc.CallOption) (*ImportOrgCaAndKeyResp, error)
}

type chainMakerCertApplyClient struct {
	cc grpc.ClientConnInterface
}

func NewChainMakerCertApplyClient(cc grpc.ClientConnInterface) ChainMakerCertApplyClient {
	return &chainMakerCertApplyClient{cc}
}

func (c *chainMakerCertApplyClient) GenerateCert(ctx context.Context, in *ChainMakerCertApplyReq, opts ...grpc.CallOption) (*GenerateResp, error) {
	out := new(GenerateResp)
	err := c.cc.Invoke(ctx, "/cmservice.ChainMakerCertApply/GenerateCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainMakerCertApplyClient) GetCertTar(ctx context.Context, in *GetCertTarReq, opts ...grpc.CallOption) (*TarCertResp, error) {
	out := new(TarCertResp)
	err := c.cc.Invoke(ctx, "/cmservice.ChainMakerCertApply/GetCertTar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainMakerCertApplyClient) GetCertByConditions(ctx context.Context, in *GetCertReq, opts ...grpc.CallOption) (*GetCertResp, error) {
	out := new(GetCertResp)
	err := c.cc.Invoke(ctx, "/cmservice.ChainMakerCertApply/GetCertByConditions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainMakerCertApplyClient) ImportOrgCaAndKey(ctx context.Context, in *ImportOrgCaAndKeyReq, opts ...grpc.CallOption) (*ImportOrgCaAndKeyResp, error) {
	out := new(ImportOrgCaAndKeyResp)
	err := c.cc.Invoke(ctx, "/cmservice.ChainMakerCertApply/ImportOrgCaAndKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainMakerCertApplyServer is the server API for ChainMakerCertApply service.
// All implementations must embed UnimplementedChainMakerCertApplyServer
// for forward compatibility
type ChainMakerCertApplyServer interface {
	GenerateCert(context.Context, *ChainMakerCertApplyReq) (*GenerateResp, error)
	GetCertTar(context.Context, *GetCertTarReq) (*TarCertResp, error)
	GetCertByConditions(context.Context, *GetCertReq) (*GetCertResp, error)
	ImportOrgCaAndKey(context.Context, *ImportOrgCaAndKeyReq) (*ImportOrgCaAndKeyResp, error)
	mustEmbedUnimplementedChainMakerCertApplyServer()
}

// UnimplementedChainMakerCertApplyServer must be embedded to have forward compatible implementations.
type UnimplementedChainMakerCertApplyServer struct {
}

func (UnimplementedChainMakerCertApplyServer) GenerateCert(context.Context, *ChainMakerCertApplyReq) (*GenerateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCert not implemented")
}
func (UnimplementedChainMakerCertApplyServer) GetCertTar(context.Context, *GetCertTarReq) (*TarCertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertTar not implemented")
}
func (UnimplementedChainMakerCertApplyServer) GetCertByConditions(context.Context, *GetCertReq) (*GetCertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertByConditions not implemented")
}
func (UnimplementedChainMakerCertApplyServer) ImportOrgCaAndKey(context.Context, *ImportOrgCaAndKeyReq) (*ImportOrgCaAndKeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportOrgCaAndKey not implemented")
}
func (UnimplementedChainMakerCertApplyServer) mustEmbedUnimplementedChainMakerCertApplyServer() {}

// UnsafeChainMakerCertApplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainMakerCertApplyServer will
// result in compilation errors.
type UnsafeChainMakerCertApplyServer interface {
	mustEmbedUnimplementedChainMakerCertApplyServer()
}

func RegisterChainMakerCertApplyServer(s grpc.ServiceRegistrar, srv ChainMakerCertApplyServer) {
	s.RegisterService(&ChainMakerCertApply_ServiceDesc, srv)
}

func _ChainMakerCertApply_GenerateCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainMakerCertApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainMakerCertApplyServer).GenerateCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmservice.ChainMakerCertApply/GenerateCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainMakerCertApplyServer).GenerateCert(ctx, req.(*ChainMakerCertApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainMakerCertApply_GetCertTar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertTarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainMakerCertApplyServer).GetCertTar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmservice.ChainMakerCertApply/GetCertTar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainMakerCertApplyServer).GetCertTar(ctx, req.(*GetCertTarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainMakerCertApply_GetCertByConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainMakerCertApplyServer).GetCertByConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmservice.ChainMakerCertApply/GetCertByConditions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainMakerCertApplyServer).GetCertByConditions(ctx, req.(*GetCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainMakerCertApply_ImportOrgCaAndKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportOrgCaAndKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainMakerCertApplyServer).ImportOrgCaAndKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmservice.ChainMakerCertApply/ImportOrgCaAndKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainMakerCertApplyServer).ImportOrgCaAndKey(ctx, req.(*ImportOrgCaAndKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainMakerCertApply_ServiceDesc is the grpc.ServiceDesc for ChainMakerCertApply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainMakerCertApply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmservice.ChainMakerCertApply",
	HandlerType: (*ChainMakerCertApplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCert",
			Handler:    _ChainMakerCertApply_GenerateCert_Handler,
		},
		{
			MethodName: "GetCertTar",
			Handler:    _ChainMakerCertApply_GetCertTar_Handler,
		},
		{
			MethodName: "GetCertByConditions",
			Handler:    _ChainMakerCertApply_GetCertByConditions_Handler,
		},
		{
			MethodName: "ImportOrgCaAndKey",
			Handler:    _ChainMakerCertApply_ImportOrgCaAndKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getcmcert.proto",
}
